<!-- Kapitel 4.4 -->
<h3 id="chapter-4-4"><!-- $chapter-4-4 --></h3>
<p>
    Zum Abschluss dieses Kapitels folgt noch eine Aufzählung
    aller sonstigen Hilfsmittel, die bei der Entwicklung der App,
    der zugehörigen Dokumentation oder beim Erstellen dieser Arbeit
    zwar von Bedeutung waren, jedoch nichts mit der eigentlichen
    Funktion von <i>OWLisch</i> zu tun haben.
</p>
<p>
    Als erstes sei hier das bereits erwähnte <i>Gulp</i> zu nennen;
    es handelt sich dabei um einen populären <i>Task-Runner</i>, der
    mittels <i>node.js</i> installiert und betrieben wird. <i>Gulp</i>
    ermöglicht es, mit einer selbst erstellen JavaScript-Datei und
    zusätzlichen Plugins Arbeitsabläufe zu definieren, die bei jeder
    Änderung einer Quell-Datei automatisiert ausgeführt werden und so
    etwa <i>LESS</i>-Dateien zu CSS kompilieren, JavaScript-Dateien
    zusammenfügen und minimieren, Bilder komprimieren oder einfach
    Dateien an einen anderen Ort kopieren.
</p>
<p>
    Ebenfalls zum Einsatz kam die Versionierungs-Software <i>Git</i>;
    dabei handelt es sich um ein Werkzeug, mit dem Änderungen am Projekt
    dokumentiert und gesichert werden können, sodass zu jedem Zeitpunkt
    zu einer vorhergegangenen Version zurückgekehrt werden kann.
</p>
<p>
    Für die Erstellung der bereits erwähnten im Anhang befindlichen
    JavaScript-Dokumentation wurde das Kommandozeilen-Programm
    <i>jsdoc-to-markdown</i> ver-wendet, das aus den Code-Kommentaren
    aller Quell-Dateien automatisiert ein detailliertes Dokument
    generiert.
</p>
<p>
    An dieser Stelle sei auch erwähnt, dass das vorliegende Dokument
    mit HTML, CSS und dem Kommandozeilen-Programm
    <i>Prince</i><!-- @import footnote-16 --> von <i>YesLogic Pty. Ltd.</i>
    erstellt und gestaltet wurde. Auch bei diesem Prozess wurde
    <i>Gulp</i> genutzt, um die Erstellung eines HTML-Dokuments und
    dessen Konvertierung zu einer PDF-Datei mit <i>Prince</i> zu
    automatisieren.
</p>
